{"version":3,"file":"static/webpack/static/development/pages/_app.js.9c260ee6a830186b1a17.hot-update.js","sources":["webpack:///./hoc/withApolloClient.tsx"],"sourcesContent":["import React from 'react';\nimport initApollo from './initApollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nimport { MyApp, MyAppProps } from '../pages/_app';\nimport { NextAppContext, DefaultAppIProps, AppProps } from 'next/app';\nimport { ApolloClient } from 'apollo-boost';\n\ninterface ApolloInitialProps extends DefaultAppIProps {\n  apolloState: any;\n}\n\ninterface ApolloProps extends MyAppProps, AppProps, ApolloInitialProps {}\n\nexport default (App: typeof MyApp) => {\n  return class Apollo extends React.Component<ApolloProps> {\n    private apolloClient: ApolloClient<any>;\n    static displayName = 'withApollo(App)';\n    static async getInitialProps(ctx: NextAppContext): Promise<ApolloInitialProps> {\n      const { Component, router } = ctx;\n\n      let appProps = { pageProps: {} };\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo();\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState\n      };\n    }\n\n    constructor(props: ApolloProps) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAWA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAQA;AACA;AATA;AAWA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAoBA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA0BA;AACA;AACA;AACA;AACA;AA9BA;AAgCA;AACA;AACA;AACA;AAnCA;AAqCA;AACA;AAtCA;AA0CA;AA1CA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA6CA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;AAlDA;AAAA;AAAA;AAoDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AArDA;AACA;AADA;AAAA;AAuDA;;;;A","sourceRoot":""}